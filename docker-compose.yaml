version: "3"
services:
  elasticsearch:
    container_name: elasticsearch
    image: docker.elastic.co/elasticsearch/elasticsearch:7.14.0
    environment:
      - discovery.type=single-node
      - "ES_JAVA_OPTS=-Xms512m -Xmx512m"
      - xpack.security.enabled=false
    ports:
      - 9200:9200
    volumes:
      - ./elasticsearch_data:/usr/share/elasticsearch/data
      - elasticsearch_config:/usr/share/elasticsearch/config
    healthcheck:
      test: ["CMD-SHELL", "curl -s http://localhost:9200 >/dev/null || exit 1"]
      interval: 30s
      timeout: 10s
      retries: 3

  kibana:
    container_name: kibana
    image: docker.elastic.co/kibana/kibana:7.14.0
    ports:
      - 5601:5601
    depends_on:
      - elasticsearch
    environment:
      - ELASTICSEARCH_HOSTS=http://elasticsearch:9200
    volumes:
      - ./kibana_data:/usr/share/kibana/data
    healthcheck:
      test:
        [
          "CMD-SHELL",
          "curl -s http://localhost:5601/api/status | grep -q 'Looking good'",
        ]
      interval: 30s
      timeout: 10s
      retries: 3

  metricbeat:
    container_name: metricbeat
    image: docker.elastic.co/beats/metricbeat:7.14.0
    user: root
    volumes:
      - /proc:/hostfs/proc:ro
      - /sys/fs/cgroup:/hostfs/sys/fs/cgroup:ro
      - /:/hostfs:ro
      - /var/run/docker.sock:/var/run/docker.sock:ro
      - ./beats/metric/metricbeat.yml:/usr/share/metricbeat/metricbeat.yml:ro
    command: ["--strict.perms=false", "-system.hostfs=/hostfs"]
    depends_on:
      elasticsearch:
        condition: service_healthy
      kibana:
        condition: service_healthy

  heartbeat:
    container_name: heartbeat
    image: docker.elastic.co/beats/heartbeat:7.14.0
    volumes:
      - ./beats/heartbeat/heartbeat.yml:/usr/share/heartbeat/heartbeat.yml:ro
    command: ["--strict.perms=false"]
    depends_on:
      elasticsearch:
        condition: service_healthy
      kibana:
        condition: service_healthy

  apm-server:
    container_name: apm-server
    image: docker.elastic.co/apm/apm-server:7.14.0
    ports:
      - 8200:8200
    volumes:
      - ./apm/apm-server.yml:/usr/share/apm-server/apm-server.yml:ro
    command: >
      apm-server -e
        -E apm-server.rum.enabled=true
        -E setup.kibana.host=kibana:5601
        -E setup.template.settings.index.number_of_replicas=0
        -E apm-server.kibana.enabled=true
        -E apm-server.kibana.host=kibana:5601
        -E output.elasticsearch.hosts=["elasticsearch:9200"]
    healthcheck:
      interval: 10s
      retries: 12
      test: curl --write-out 'HTTP %{http_code}' --fail --silent --output /dev/null http://localhost:8200/
    depends_on:
      elasticsearch:
        condition: service_healthy
      kibana:
        condition: service_healthy

  postgres:
    container_name: postgres
    image: postgres:13
    environment:
      POSTGRES_DB: myapp
      POSTGRES_USER: myuser
      POSTGRES_PASSWORD: mypassword
    ports:
      - "5432:5432"

  go-app:
    container_name: go-app
    build:
      context: ./app
      dockerfile: Dockerfile
    ports:
      - "8080:8080"
    environment:
      - DATABASE_URL=postgres://myuser:mypassword@postgres:5432/myapp?sslmode=disable
      - ELASTIC_APM_SERVER_URL=http://apm-server:8200
      - ELASTIC_APM_SERVICE_NAME=go-app
    depends_on:
      - postgres
      - apm-server

  nginx:
    container_name: nginx
    image: nginx:latest
    ports:
      - "80:80"
    volumes:
      - ./nginx/default.conf:/etc/nginx/conf.d/default.conf
      - ./nginx/logs:/var/log/nginx # Adicionando volume para logs
    depends_on:
      - go-app

  filebeat:
    container_name: filebeat
    image: docker.elastic.co/beats/filebeat:7.14.0
    user: root
    volumes:
      - ./beats/filebeat/filebeat.yml:/usr/share/filebeat/filebeat.yml:ro
      - /var/lib/docker/containers:/var/lib/docker/containers:ro
      - /var/run/docker.sock:/var/run/docker.sock:ro
      - ./nginx/logs:/var/log/nginx:ro # Adicionando volume para logs do Nginx
    command: ["--strict.perms=false"]
    depends_on:
      elasticsearch:
        condition: service_healthy
      kibana:
        condition: service_healthy

volumes:
  elasticsearch_config:
